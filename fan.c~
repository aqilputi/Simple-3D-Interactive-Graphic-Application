#include "glad.h"
#include <GLFW/glfw3.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <math.h>
#include <time.h>

using namespace std;


const char *vertexShaderSource = "#version 330 core\n"
    "layout (location = 0) in vec3 aPos;\n"
    "void main()\n"
    "{\n"
    "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
    "}\0";
const char *fragmentShaderSource = "#version 330 core\n"
    "out vec4 FragColor;\n"
    "void main()\n"
    "{\n"
    "   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
    "}\n\0";
  

void processInput(GLFWwindow *window) {
  if (glfwGetKey (window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
      glfwSetWindowShouldClose (window, true);
  }
}

void framebuffer_size_callback (GLFWwindow* window, int width, int height) {
  glViewport (0, 0, width, height);
}

void key_callback (GLFWwindow* window, int key, int scancode, int action, int mods) {
  if (key = GLFW_KEY_E && action == GLFW_PRESS) {
    spin ();
  } else if (key = GLFW_KEY_Q && action == GLFW_PRESS) {
    currentXPos--;
    if (currentXPos < 0)
      currentXPos = 0;
  } else if (key = GLFW_KEY_SPACE && action == GLFW_PRESS) {
    currentXPos--;
    if (currentXPos < 0)
      currentXPos = 0;
  }
}

// TRANSFORMAÇÕES DE TRANSLAÇÃO E ROTAÇÃO EM UM PONTO
float* transformacoes2D (float *M, float x, float y) {
  float v[3] = {x, y, 1};
  float *vt = (float *) malloc (sizeof (float) * 3);
  int i, j;

  for (i = 0; i < 3; i++){
    vt[i] = 0;
    for (j = 0; j < 3; j++){
      vt[i] += M[i * 3 + j] * v[j];
    }
  }

  return vt;
}

// ENCONTRAR MATRIZ DE TRANSFORMAÇÃO
float* matriz_transformacao2D (float *M1, float *M2) {
  float *M = (float *) malloc (sizeof (float) * 9);
  float sum = 0;
  int i, j, k;

  for (i = 0; i < 3; i++) {
    for (j = 0; j < 3; j++) {
      for (k = 0; k < 3; k++) {
        sum += M1[i * 3 + k] * M2[k * 3 + j];
      }
      M[i * 3 + j] = sum;
      sum = 0;
    }
  }

  return M;
}

void move (GLFWwindow *window, float *v, float *T2D) {
  float *p; // ponto de transformação
  int i;

  if (glfwGetKey (window, GLFW_KEY_W) == GLFW_PRESS) { // top
    T2D[5] = 0.005; // ty = 0.005

    for (i = 0; i < 10; i++) {
      p = transformacoes2D (T2D, v[i * 3], v[i * 3 + 1]);
      v[i * 3] = p[0];
      v[i * 3 + 1] = p[1];
    }

    T2D[5] = 0; // ty = 0
  } else if (glfwGetKey (window, GLFW_KEY_A) == GLFW_PRESS) { // left
    T2D[2] = -0.005; // tx = -0.005

    for (i = 0; i < 10; i++) {
        p = transformacoes2D (T2D, v[i * 3], v[i * 3 + 1]);
        v[i * 3] = p[0];
        v[i * 3 + 1] = p[1];
      }

    T2D[2] = 0;
  } else if (glfwGetKey (window, GLFW_KEY_S) == GLFW_PRESS) { // buttom 
    T2D[5] = -0.005; // ty = -0.005

    for (i = 0; i < 10; i++) {
        p = transformacoes2D (T2D, v[i * 3], v[i * 3 + 1]);
        v[i * 3] = p[0];
        v[i * 3 + 1] = p[1];
      }

    T2D[5] = 0; // ty = 0
  } else if (glfwGetKey (window, GLFW_KEY_D) == GLFW_PRESS) { // right
    T2D[2] = 0.005; // tx = 0.005

    for (i = 0; i < 10; i++) {
        p = transformacoes2D (T2D, v[i * 3], v[i * 3 + 1]);
        v[i * 3] = p[0];
        v[i * 3 + 1] = p[1];
      }

    T2D[2] = 0;
  }
}

void rotate (float *v, float *T2D, float *R2D, float *vel) {
  float *M, *p; // matriz e ponto de transformação
  int i;

  // Rotação horária de 1º
  R2D[0] = cos (*vel);
  R2D[1] = -sin (*vel);
  R2D[3] = -R2D[1];
  R2D[4] = R2D[0];

  // Movo eixo de rotação para origem
  T2D[2] = v[0]; 
  T2D[5] = v[1];

  M = matriz_transformacao2D (T2D, R2D); // executo a rotação
  
  T2D[2] = -v[0]; 
  T2D[5] = -v[1];
  
  M = matriz_transformacao2D (M, T2D); // movo o ponto de rotação para a posição original

  for (i = 0; i < 10; i++) {
      p = transformacoes2D (M, v[i * 3], v[i * 3 + 1]);
      v[i * 3] = p[0];
      v[i * 3 + 1] = p[1];
  }
  
  T2D[2] = 0;
  T2D[5] = 0;
}

void spin (GLFWwindow *window, float *v, float *T2D, float *R2D, float *vel, int *flag) {
  if (*flag == 1) {
    rotate (v, T2D, R2D, vel);
  }
  
  if (glfwGetKey (window, GLFW_KEY_E) == GLFW_PRESS) { // increase speed
    *vel += ((-0.25 * M_PI) / 180);
    printf("vel = %lf\n", *vel);
  } else if (glfwGetKey (window, GLFW_KEY_Q) == GLFW_PRESS) { // decrease speed
    *vel -= ((-0.25 * M_PI) / 180);
    printf("vel = %lf\n", *vel);
  } else if (glfwGetKey (window, GLFW_KEY_SPACE) == GLFW_PRESS) { // stop / start
    if (*flag == 1) *flag = 0;
    else if (*flag == 0) *flag = 1;
  }
}

void sleepcp(int milliseconds) { // Cross-platform sleep function
    clock_t time_end;
    time_end = clock () + milliseconds * CLOCKS_PER_SEC / 1000;
    while (clock () < time_end) {}
}

int main (void){
  glfwInit ();
  glfwWindowHint (GLFW_CONTEXT_VERSION_MAJOR, 3);
  glfwWindowHint (GLFW_CONTEXT_VERSION_MINOR, 3);
  glfwWindowHint (GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
  // glfwWindowHint (GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

  GLFWwindow* window = glfwCreateWindow (800, 600, "Trabalho 1", NULL, NULL);
  if (window == NULL) {
    std::cout << "Failed to create GLFW window" << std::endl;
    glfwTerminate ();
    return -1;
  }

  glfwMakeContextCurrent (window);

  if (!gladLoadGLLoader ((GLADloadproc) glfwGetProcAddress)) {
    std::cout << "Failed to initialize GLAD" << std::endl;
    return -1;
  }    

  glViewport (0, 0, 800, 600);

  glfwSetFramebufferSizeCallback (window, framebuffer_size_callback);  

  // compiling vertex shader
  unsigned int vertexShader;
  vertexShader = glCreateShader (GL_VERTEX_SHADER);
  glShaderSource (vertexShader, 1, &vertexShaderSource, NULL);
  glCompileShader (vertexShader);
  
  //// check
  int  success;
  char infoLog [512];
  glGetShaderiv (vertexShader, GL_COMPILE_STATUS, &success);
  
  if(!success) {
    glGetShaderInfoLog (vertexShader, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
  }


  // compiling fragment shader
  unsigned int fragmentShader;
  fragmentShader = glCreateShader (GL_FRAGMENT_SHADER);
  glShaderSource (fragmentShader, 1, &fragmentShaderSource, NULL);
  glCompileShader (fragmentShader);
  
  //// check
  glGetShaderiv (vertexShader, GL_COMPILE_STATUS, &success);
  if (!success) {
    glGetShaderInfoLog (fragmentShader, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
  }


  unsigned int shaderProgram;
  shaderProgram = glCreateProgram ();
  glAttachShader (shaderProgram, vertexShader);
  glAttachShader (shaderProgram, fragmentShader);
  glLinkProgram (shaderProgram);


  glGetProgramiv (shaderProgram, GL_LINK_STATUS, &success);
  
  if(!success) {
    glGetProgramInfoLog (shaderProgram, 512, NULL, infoLog);
    std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
  }
  // !!!glUseProgram (shaderProgram);

  glDeleteShader (vertexShader);
  glDeleteShader (fragmentShader); 

  float vertices[] = {
    // axis
       0.0f,   0.0f,   0.0f, // P0
    // first triangle
     -0.25f,   0.5f,   0.0f, // P1
      0.25f,   0.5f,   0.0f, // P2
    // second triangle
       0.5f,  0.25f,   0.0f, // P3
       0.5f, -0.25f,   0.0f, // P4
    // third triangle
      0.25f,  -0.5f,   0.0f, // P5
     -0.25f,  -0.5f,   0.0f, // P6
    // fourth triangle
      -0.5f, -0.25f,   0.0f, // P7
      -0.5f,  0.25f,   0.0f, // P8
  };

  unsigned int indices[] = {  // note that we start from 0!
    0, 1, 2, // first triangle
    0, 3, 4, // second triangle
    0, 5, 6, // third triangle
    0, 7, 8, // fourth triangle
  }; 

  // configuring triangle to gpu
  unsigned int EBO;
  glGenBuffers (1, &EBO);  
  unsigned int VBO;
  glGenBuffers (1, &VBO);  
  unsigned int VAO;
  glGenVertexArrays (1, &VAO);  

  glBindVertexArray (VAO);
 
  glBindBuffer (GL_ARRAY_BUFFER, VBO);
  glBufferData (GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
  
  glBindBuffer (GL_ELEMENT_ARRAY_BUFFER, EBO);
  glBufferData (GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

  glVertexAttribPointer (0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
  glEnableVertexAttribArray (0);

  // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
  glBindBuffer (GL_ARRAY_BUFFER, 0); 

  // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
  // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
  glBindVertexArray (0); 


  // inicia uma matriz de translação 2D
  float T2D [] = {
    1, 0, 0, // tx = 0
    0, 1, 0, // ty = 0
    0, 0, 1,
  };

  // inicia uma matriz de rotação 2D, teta = 0º
  float R2D [] = {
    1,  0, 0, // cos 0 = 1, -sen 0 = 0
    0,  1, 0, // sen 0 = 0,  cos 0 = 1
    0,  0, 1
  };

  float vel = ((-0.25 * M_PI) / 180); // velocidade pre determinada de 0.25º no sentido horário
  //float vel = -1.5708; // -90º
  //float vel = -0.785398; // -45º
  int flag = 1; // diz se está girando ou não

  //set callbacks in events
  glfwSetKeyCallback (window, key_callback);

  // polymode
  // glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
  // loop
  while(!glfwWindowShouldClose (window)) {
    move (window, vertices, T2D);
    spin (window, vertices, T2D, R2D, &vel, &flag);
    //sleepcp (100);

    // movimentacao da casa
    glBindBuffer (GL_ARRAY_BUFFER, VBO); //associa um buffer ao gpu
    glBufferData (GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); //escreve buffer de vertices ao buffer VBO
    glBindBuffer (GL_ARRAY_BUFFER, 0); 

    //inputs
    processInput (window);

    //rendering commands
    glClearColor (0.2f, 0.3f, 0.3f, 1.0f);
    glClear (GL_COLOR_BUFFER_BIT);

    //draw
    glUseProgram (shaderProgram);
    glBindVertexArray (VAO);
    glDrawElements (GL_TRIANGLES, 12, GL_UNSIGNED_INT, 0);
    
    //swap 
    glfwPollEvents ();    
    glfwSwapBuffers (window);
  }
  
  glfwTerminate ();
  return 0;
}